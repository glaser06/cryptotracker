//
//  ListCoinsViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/23/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListCoinsDisplayLogic: class
{
//    func displaySomething(viewModel: ListCoins.Something.ViewModel)
    func displayCoins(viewModel: ListCoins.FetchCoins.ViewModel)
}

class ListCoinsViewController: UIViewController, ListCoinsDisplayLogic
{
    var interactor: ListCoinsBusinessLogic?
    var router: (NSObjectProtocol & ListCoinsRoutingLogic & ListCoinsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListCoinsInteractor()
        let presenter = ListCoinsPresenter()
        let router = ListCoinsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var coinsOnDisplay: [ListCoins.FetchCoins.ViewModel.DisplayableCoin] = []
    var gotoTransaction: Bool = false
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupTable()
        fetchCoins(nil)
        
        
        
        
        
        
    }
    func setupTable() {
        
        let refresher = UIRefreshControl()
        refresher.addTarget(self, action: #selector(forceRefresh(_:)), for: .valueChanged)
        coinTableView.refreshControl = refresher
        
        coinTableView.register(UINib(nibName: "CoinTableViewCell", bundle: nil), forCellReuseIdentifier: "CoinCell")
        
        coinTableView.rowHeight = UITableViewAutomaticDimension
        coinTableView.estimatedRowHeight = 120
    }

    
    // MARK: Do something
    
    @IBOutlet weak var coinTableView: UITableView!
    
//    func refreshCoins(_ refresher: UIRefreshControl) {
//        self.fetchCoins(completion: {
//            refresher.endRefreshing()
//        })
//        
//    }
    @IBAction func close() {
        self.navigationController?.dismiss(animated: true, completion: nil)
    }
    func forceRefresh(_ refresher: UIRefreshControl?) {
        let req = ListCoins.FetchCoins.Request(completion: {
            if let r = refresher {
                r.endRefreshing()
            }
        })
        interactor?.forceRefresh(request: req)
    }
    func fetchCoins(_ refresher: UIRefreshControl?) {
        let req = ListCoins.FetchCoins.Request(completion: {
            if let r = refresher {
                r.endRefreshing()
            }
        })
        interactor?.fetchCoins(request: req)
    }
    
    
    func displayCoins(viewModel: ListCoins.FetchCoins.ViewModel) {
        self.coinsOnDisplay = viewModel.coins
        self.gotoTransaction = viewModel.gotoTransaction
        self.coinTableView.reloadData()
    }
}
extension ListCoinsViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.coinsOnDisplay.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CoinCell") as! CoinTableViewCell
        cell.setCell(data: self.coinsOnDisplay[indexPath.row])
        
        
        return cell
         
    
        
        
        
    }
}
extension ListCoinsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if self.gotoTransaction {
            self.performSegue(withIdentifier: "AddTransaction", sender: tableView)
            
        } else {
            self.performSegue(withIdentifier: "ShowCoin", sender: tableView)
            
        }
        tableView.deselectRow(at: indexPath, animated: true)
        
    }
    
}

















