//
//  ListCoinsViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/23/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import YIInnerShadowView
import Hero
import SnapKit


protocol ListCoinsDisplayLogic: class
{
//    func displaySomething(viewModel: ListCoins.Something.ViewModel)
    func displayCoins(viewModel: ListCoins.FetchCoins.ViewModel)
    func displayResults(viewModel: ListCoins.SearchCoin.ViewModel)
}

class ListCoinsViewController: UIViewController, ListCoinsDisplayLogic
{
    var interactor: ListCoinsBusinessLogic?
    var router: (NSObjectProtocol & ListCoinsRoutingLogic & ListCoinsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListCoinsInteractor()
        let presenter = ListCoinsPresenter()
        let router = ListCoinsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var coinsOnDisplay: [ListCoins.DisplayableCoin] = []
    var gotoTransaction: Bool = false
    var doSwitch: Bool = true
    var currentDisplayIndex: Int = 0
    
    var displayable: ListCoins.FetchCoins.ViewModel?
    
    var refresher: UIRefreshControl!
    
    @IBOutlet weak var searchBar: UISearchBar!
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupTable()
        setupMenu()
        fetchCoins(nil)
        panGR = UIPanGestureRecognizer(target: self, action: #selector(handlePan(gestureRecognizer:)))
        view.addGestureRecognizer(panGR)
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
        navigationController?.navigationBar.shadowImage = UIImage()
//        self.tabBarController?.heroTabBarAnimationType = .fade
        self.rightBarView.snp.makeConstraints { (make) in
            make.height.equalTo(56)
            make.width.equalTo(self.view.frame.width - 75)
//            self.navigationItem
//            make.center.equalTo((self.navigationBar.topItem?.titleView)!)
//            make.centerX.equalTo((self.navigationController?.navigationBar.topItem?.titleView)!)
        }
//        let tap = UITapGestureRecognizer(target: self, action: #selector(menu))
//        self.rightBarView.addGestureRecognizer(tap)
//        self.searchBar.isUserInteractionEnabled = false
        self.navigationController?.navigationBar.layoutIfNeeded()
//        self.searchBar.heroModifiers = [HeroModifier.translate(CGPoint.zero), .size(CGSize(width: 1, height: 56)), ]
//        self.coinTableView.heroModifiers = [.cascade(delta: 0.25, delayMatchedViews: true)]
//        self.view.heroModifiers = [.fade]
//        self.view.bringSubview(toFront: self.menuView)

        
//        do {
//            try MarketWorker.sharedInstance.unpackCoins()
//        } catch {
//            
//        }
        
        
        
        
        
        
    }
    override func viewWillAppear(_ animated: Bool) {
        navigationController?.heroNavigationAnimationType = .auto
//        var i = 1
//        self.coinTableView.visibleCells.map { (cell) -> Void in
//            if i < 11 {
//                cell.heroModifiers = [.duration(0.075 * Double(i)), .fade]
//
//            }
//            i += 1
//        }

        if self.coinsOnDisplay.count == 0 {
            fetchCoins(nil)
        }
    }
    
    
    func setupTable() {

        coinTableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        let refresher = UIRefreshControl()
        refresher.addTarget(self, action: #selector(forceRefresh(_:)), for: .valueChanged)
        coinTableView.refreshControl = refresher
        self.refresher = refresher
        
        coinTableView.register(UINib(nibName: "CoinTableViewCell", bundle: nil), forCellReuseIdentifier: "CoinCell")
        
        coinTableView.rowHeight = UITableViewAutomaticDimension
        coinTableView.estimatedRowHeight = 120
    }

    
    // MARK: Do something
    
    @IBOutlet weak var coinTableView: UITableView!
//    @IBOutlet weak var menuView: UIView!
    @IBOutlet weak var topLeftButton: UIButton!
    @IBOutlet weak var rightBarView: UIView!

    
    
    
//    func refreshCoins(_ refresher: UIRefreshControl) {
//        self.fetchCoins(completion: {
//            refresher.endRefreshing()
//        })
//        
//    }
    @IBAction func close() {
        
        self.tabBarController?.heroTabBarAnimationType = .slide(direction: .right)
        self.tabBarController?.selectedIndex = 0
        
    }
    var panGR: UIPanGestureRecognizer!
    var isAnimating: Bool = false
    
    
    func handlePan(gestureRecognizer:UIPanGestureRecognizer) {
        CodeTimer.finish("touch to rec")
        CodeTimer.set()
        let translation = panGR.translation(in: nil)
        var progress = translation.x / view.bounds.width / 2
//        print(translation)
        print(progress)
        switch panGR.state {
        case .began:
            // begin the transition as normal
            
            if progress > 0 {
//                self.tabBarController?.heroTabBarAnimationType = .slide(direction: .left)
//                self.tabBarController?.selectedIndex = 1
                self.tabBarController?.heroTabBarAnimationType = .slide(direction: .right)
                self.tabBarController?.selectedIndex = 0
                Hero.shared.update(progress + 0.1)
                
//                Hero.shared.apply(modifiers: [.translate(x: translation.x, y: 0, z: 0)], to: self.view)
                isAnimating = true
                
            }
        case .changed:
            
            // calculate the progress based on how far the user moved
            if !isAnimating {
                if progress > 0 {
                    //                self.tabBarController?.heroTabBarAnimationType = .slide(direction: .left)
                    //                self.tabBarController?.selectedIndex = 1
                    self.tabBarController?.heroTabBarAnimationType = .slide(direction: .right)
                    self.tabBarController?.selectedIndex = 0
                    CodeTimer.set()
                    isAnimating = true
                }
            }
            if isAnimating {
                if progress < 0 {
                    progress = 0
                }
                //            let translation = panGR.translation(in: nil)
                //            let progress = translation.x / 2 / view.bounds.width
                
                Hero.shared.update(progress + 0.1)
//                CodeTimer.finish("asdfasdf")
//                CodeTimer.set()
//                Hero.shared.apply(modifiers: [.translate(x: translation.x, y: 0, z: 0)], to: self.view)
            }
            
//            Hero.shared.apply(modifiers: [.translate(x: translation.x, y: 0, z: 0)], to: self.view)
        //            Hero.shared.update(Double(progress))
        default:
            
            // end or cancel the transition based on the progress and user's touch velocity
            Hero.shared.update(progress + 0.1)
            Hero.shared.apply(modifiers: [.translate(x: translation.x, y: 0, z: 0)], to: self.view)
            if progress + self.panGR.velocity(in: nil).x / self.view.bounds.width > 0.3 {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.0, execute: {
                    Hero.shared.finish()
                })
                
            } else if progress + self.panGR.velocity(in: nil).x / self.view.bounds.width < -0.3 {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.0, execute: {
                    Hero.shared.finish()
                })
            } else {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.0, execute: {
                    Hero.shared.cancel()
                })
            }
            isAnimating = false
            
            
        }
    }
    func forceRefresh(_ refresher: UIRefreshControl?) {
        let req = ListCoins.FetchCoins.Request(completion: {
            if let r = refresher {
                r.endRefreshing()
            }
        })
        interactor?.forceRefresh(request: req)
    }
    func fetchCoins(_ refresher: UIRefreshControl?) {
        let req = ListCoins.FetchCoins.Request(completion: {
            if let r = refresher {
                r.endRefreshing()
            }
        })
        interactor?.fetchCoins(request: req)
    }
    
    
    func displayCoins(viewModel: ListCoins.FetchCoins.ViewModel) {
        self.coinsOnDisplay = viewModel.coins
        self.gotoTransaction = viewModel.gotoTransaction
        
        self.refresher.endRefreshing()
        
        self.coinTableView.reloadData()
//        var i = 1
//        self.coinTableView.visibleCells.map { (cell) -> Void in
//            if i < 11 {
//                cell.heroModifiers = [.duration(0.075 * Double(i)), .fade]
//
//            }
//            i += 1
//        }
        self.doSwitch = viewModel.doSwitch
        if !self.doSwitch  {
            self.topLeftButton.setImage(#imageLiteral(resourceName: "close-black"), for: .normal)
        }
        self.displayable = viewModel
    }
    
    func displayResults(viewModel: ListCoins.SearchCoin.ViewModel) {
        self.coinsOnDisplay = viewModel.coins
        self.coinTableView.reloadData()
    }
    
    
    @IBOutlet weak var menuBarButton: UIBarButtonItem!
    func setupMenu() {
        
//        var view = menuBarButton.customView!
//        view.frame = CGRect(x: view.frame.origin.x, y: view.frame.origin.y, width: 44, height: 44)
//        
//        view.layer.cornerRadius = 22.0
//        self.topLeftButton.setImage(#imageLiteral(resourceName: "close-black"), for: .normal)
//        self.view.setNeedsLayout()
//        self.view.layoutIfNeeded()
        
    }
    var tapToCloseGesture: UITapGestureRecognizer?


    @IBAction func switchToView(sender: UIButton) {
        self.tabBarController?.selectedIndex = sender.tag - 1
//        self.menu()
    }
    
    
    var selectedSymbol: String = ""
    
}
extension ListCoinsViewController: UITableViewDataSource {
    
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.coinsOnDisplay.count
    }
    func changeAllCellDisplay () {
        for cell in self.coinTableView.visibleCells {
            let c = (cell as? CoinTableViewCell)
            if c != nil && !c!.isSender {
                
                c!.changeDisplayNoLooping()
                
                
            } else if c!.isSender {
                c!.isSender = false
            }
        }
        self.currentDisplayIndex += 1
        if self.currentDisplayIndex >= 2 {
            self.currentDisplayIndex = 0
        }
        
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CoinCell") as! CoinTableViewCell
        cell.setCell(data: self.coinsOnDisplay[indexPath.row], change: changeAllCellDisplay, currentInfo: self.currentDisplayIndex)
        
        
        return cell
         
    
        
        
        
    }
}
extension ListCoinsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.selectedSymbol = self.coinsOnDisplay[indexPath.row].symbol.uppercased()
//        tableView.dequeueReusableCell(withIdentifier: "CoinCell", for: indexPath).heroID = "bigView"
        if self.gotoTransaction {
            self.performSegue(withIdentifier: "AddTransaction", sender: tableView)
            
        } else {
            self.performSegue(withIdentifier: "ShowCoin", sender: tableView)
            
        }
        tableView.deselectRow(at: indexPath, animated: true)
        
    }
    
}

extension ListCoinsViewController: UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        self.interactor?.searchCoin(request: ListCoins.SearchCoin.Request(query: searchText))
    }
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if searchBar.text == "" {
            self.coinsOnDisplay = self.displayable!.coins
            self.coinTableView.reloadData()
        }
        searchBar.resignFirstResponder()
        
    }
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = ""
        self.coinsOnDisplay = self.displayable!.coins
        self.coinTableView.reloadData()
        searchBar.resignFirstResponder()
    }
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
//        self.coinsOnDisplay = self.displayable!.coins
//        self.coinTableView.reloadData()
        searchBar.barTintColor = UIColor.lightGray
        searchBar.setShowsCancelButton(false, animated: true)
        
        searchBar.resignFirstResponder()
    }
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchBar.barTintColor = UIColor.lightGray
        searchBar.setShowsCancelButton(true, animated: true)
    }
    
    
}
















