//
//  ListCoinsViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/23/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import YIInnerShadowView

protocol ListCoinsDisplayLogic: class
{
//    func displaySomething(viewModel: ListCoins.Something.ViewModel)
    func displayCoins(viewModel: ListCoins.FetchCoins.ViewModel)
    func displayResults(viewModel: ListCoins.SearchCoin.ViewModel)
}

class ListCoinsViewController: UIViewController, ListCoinsDisplayLogic
{
    var interactor: ListCoinsBusinessLogic?
    var router: (NSObjectProtocol & ListCoinsRoutingLogic & ListCoinsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListCoinsInteractor()
        let presenter = ListCoinsPresenter()
        let router = ListCoinsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var coinsOnDisplay: [ListCoins.DisplayableCoin] = []
    var gotoTransaction: Bool = false
    var doSwitch: Bool = true
    var currentDisplayIndex: Int = 0
    
    var displayable: ListCoins.FetchCoins.ViewModel?
    
    var refresher: UIRefreshControl!
    
    @IBOutlet weak var searchBar: UISearchBar!
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupTable()
        setupMenu()
        fetchCoins(nil)
//        self.view.bringSubview(toFront: self.menuView)
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
        navigationController?.navigationBar.shadowImage = UIImage()
//        do {
//            try MarketWorker.sharedInstance.unpackCoins()
//        } catch {
//            
//        }
        
        
        
        
        
        
    }
    func setupTable() {

        coinTableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        let refresher = UIRefreshControl()
        refresher.addTarget(self, action: #selector(forceRefresh(_:)), for: .valueChanged)
        coinTableView.refreshControl = refresher
        self.refresher = refresher
        
        coinTableView.register(UINib(nibName: "CoinTableViewCell", bundle: nil), forCellReuseIdentifier: "CoinCell")
        
        coinTableView.rowHeight = UITableViewAutomaticDimension
        coinTableView.estimatedRowHeight = 120
    }

    
    // MARK: Do something
    
    @IBOutlet weak var coinTableView: UITableView!
//    @IBOutlet weak var menuView: UIView!
    @IBOutlet weak var topLeftButton: UIButton!
    
    
    
//    func refreshCoins(_ refresher: UIRefreshControl) {
//        self.fetchCoins(completion: {
//            refresher.endRefreshing()
//        })
//        
//    }
    @IBAction func close() {
        
        if self.doSwitch {
            self.tabBarController?.selectedIndex = 0
        } else {
            self.navigationController?.dismiss(animated: true, completion: nil)
        }
        
    }
    func forceRefresh(_ refresher: UIRefreshControl?) {
        let req = ListCoins.FetchCoins.Request(completion: {
            if let r = refresher {
                r.endRefreshing()
            }
        })
        interactor?.forceRefresh(request: req)
    }
    func fetchCoins(_ refresher: UIRefreshControl?) {
        let req = ListCoins.FetchCoins.Request(completion: {
            if let r = refresher {
                r.endRefreshing()
            }
        })
        interactor?.fetchCoins(request: req)
    }
    
    
    func displayCoins(viewModel: ListCoins.FetchCoins.ViewModel) {
        self.coinsOnDisplay = viewModel.coins
        self.gotoTransaction = viewModel.gotoTransaction
        
        self.refresher.endRefreshing()
        
        self.coinTableView.reloadData()
        self.doSwitch = viewModel.doSwitch
        if !self.doSwitch  {
            self.topLeftButton.setImage(#imageLiteral(resourceName: "close-black"), for: .normal)
        }
        self.displayable = viewModel
    }
    
    func displayResults(viewModel: ListCoins.SearchCoin.ViewModel) {
        self.coinsOnDisplay = viewModel.coins
        self.coinTableView.reloadData()
    }
    
    
    @IBOutlet weak var menuBarButton: UIBarButtonItem!
    func setupMenu() {
        
//        var view = menuBarButton.customView!
//        view.frame = CGRect(x: view.frame.origin.x, y: view.frame.origin.y, width: 44, height: 44)
//        
//        view.layer.cornerRadius = 22.0
        self.topLeftButton.setImage(#imageLiteral(resourceName: "close-black"), for: .normal)
        self.view.setNeedsLayout()
        self.view.layoutIfNeeded()
        
    }
    var tapToCloseGesture: UITapGestureRecognizer?
    @IBAction func menu() {
        
        if !self.doSwitch {
            self.dismiss(animated: true, completion: nil)
            return
        }
        
        //        self.tabBarController?.selectedIndex = 1
        if self.navigationController?.navigationBar.layer.zPosition == -1 {
            //            self.menuView.isHidden = true
            self.navigationController?.navigationBar.layer.zPosition = 0
            self.view.removeGestureRecognizer(self.tapToCloseGesture!)
            collapseMenu()
        } else {
            
            //            self.menuView.isHidden = false
            
            expandMenu()
            
            self.navigationController?.navigationBar.layer.zPosition = -1
            let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.closeMenu(_:)))
            self.tapToCloseGesture = tapGesture
            self.view.addGestureRecognizer(tapGesture)
        }
        
        
        
    }
    func expandMenu() {
        var view = menuBarButton.customView!
        
        view.frame = CGRect(x: view.frame.origin.x, y: view.frame.origin.y, width: 200.0, height: 44.0)
        
        view.backgroundColor = UIColor.groupTableViewBackground
        
        UIView.animate(withDuration: 19.0, animations: {
            self.menuBarButton.customView!.frame = CGRect(x: view.frame.origin.x, y: view.frame.origin.y, width: 200.0, height: 44.0)
            //            self.menuBarButton.customView!.addInnerShadow(onSide: .all, shadowColor: .darkGray, shadowSize: 1.0, shadowOpacity: 0.5)
            let innerShadow: YIInnerShadowView = YIInnerShadowView(frame: CGRect(x: 0, y: 0, width: 200, height: 44))
            innerShadow.layer.cornerRadius = 22
            innerShadow.cornerRadius = 22
            innerShadow.shadowRadius = 2
            innerShadow.shadowOpacity = 0.4
            innerShadow.shadowColor = UIColor.lightGray
            innerShadow.shadowMask = YIInnerShadowMaskAll
            innerShadow.tag = 11
            //            self.menuBarButton.customView!.addSubview(innerShadow)
            self.menuBarButton.customView?.setNeedsLayout()
            self.menuBarButton.customView?.layoutIfNeeded()
            
            self.view.setNeedsLayout()
            self.view.layoutIfNeeded()
        }, completion: { (f) in
            
        })
        
    }
    func collapseMenu() {
        var view = menuBarButton.customView!
        view.frame = CGRect(x: view.frame.origin.x, y: view.frame.origin.y, width: 44.0, height: 44.0)
        view.backgroundColor = UIColor.white
        view.viewWithTag(11)?.removeFromSuperview()
        menuBarButton.customView = view
        
        
        self.view.setNeedsLayout()
        self.view.layoutIfNeeded()
    }
    func closeMenu(_ sender: UITapGestureRecognizer) {
        self.view.removeGestureRecognizer(sender)
        if self.navigationController?.navigationBar.layer.zPosition == -1 {
            self.menu()
        }
        
    }
    @IBAction func switchToView(sender: UIButton) {
        self.tabBarController?.selectedIndex = sender.tag - 1
        self.menu()
    }
    
    
    var selectedSymbol: String = ""
    
}
extension ListCoinsViewController: UITableViewDataSource {
    
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.coinsOnDisplay.count
    }
    func changeAllCellDisplay () {
        for cell in self.coinTableView.visibleCells {
            let c = (cell as? CoinTableViewCell)
            if c != nil && !c!.isSender {
                
                c!.changeDisplayNoLooping()
                
                
            } else if c!.isSender {
                c!.isSender = false
            }
        }
        self.currentDisplayIndex += 1
        if self.currentDisplayIndex >= 2 {
            self.currentDisplayIndex = 0
        }
        
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CoinCell") as! CoinTableViewCell
        cell.setCell(data: self.coinsOnDisplay[indexPath.row], change: changeAllCellDisplay, currentInfo: self.currentDisplayIndex)
        
        
        return cell
         
    
        
        
        
    }
}
extension ListCoinsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.selectedSymbol = self.coinsOnDisplay[indexPath.row].symbol.uppercased()
        if self.gotoTransaction {
            self.performSegue(withIdentifier: "AddTransaction", sender: tableView)
            
        } else {
            self.performSegue(withIdentifier: "ShowCoin", sender: tableView)
            
        }
        tableView.deselectRow(at: indexPath, animated: true)
        
    }
    
}

extension ListCoinsViewController: UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        self.interactor?.searchCoin(request: ListCoins.SearchCoin.Request(query: searchText))
    }
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if searchBar.text == "" {
            self.coinsOnDisplay = self.displayable!.coins
            self.coinTableView.reloadData()
        }
        searchBar.resignFirstResponder()
        
    }
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = ""
        self.coinsOnDisplay = self.displayable!.coins
        self.coinTableView.reloadData()
        searchBar.resignFirstResponder()
    }
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
//        self.coinsOnDisplay = self.displayable!.coins
//        self.coinTableView.reloadData()
        searchBar.barTintColor = UIColor.lightGray
        searchBar.setShowsCancelButton(false, animated: true)
        
        searchBar.resignFirstResponder()
    }
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchBar.barTintColor = UIColor.lightGray
        searchBar.setShowsCancelButton(true, animated: true)
    }
    
    
}
















