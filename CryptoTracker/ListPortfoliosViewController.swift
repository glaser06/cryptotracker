//
//  ListPortfoliosViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 10/29/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Hero
import SnapKit

protocol ListPortfoliosDisplayLogic: class
{
    func displayPortfolios(viewModel: ListPortfolios.FetchPortfolios.ViewModel)
}

class ListPortfoliosViewController: UIViewController, ListPortfoliosDisplayLogic
{
    var interactor: ListPortfoliosBusinessLogic?
    var router: (NSObjectProtocol & ListPortfoliosRoutingLogic & ListPortfoliosDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListPortfoliosInteractor()
        let presenter = ListPortfoliosPresenter()
        let router = ListPortfoliosRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var isFirstLoad: Bool = true
    
    var portfolios: [ListPortfolios.FetchPortfolios.ViewModel.DisplayablePortfolio] = []
    
    var panGR: UIPanGestureRecognizer!
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        panGR = UIPanGestureRecognizer(target: self, action: #selector(handlePan(gestureRecognizer:)))
        view.addGestureRecognizer(panGR)
        
//        self.navigationController?.heroNavigationAnimationType = .fade
        self.navigationController?.clearShadow()
        
        if UIDevice.current.modelName == "iPhone 6" {
            
        }
//        self.navBarView.widthAnchor.constraint(equalToConstant: 375).isActive = true
//        self.navBarView.heightAnchor.constraint(equalToConstant: 56).isActive = true
        
//        self.navBarView.backgroundColor = UIColor.blue
        self.portfolioTableView.tableFooterView = nil
        setupTableView()
        self.fetchPortfolios()
        
    }
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.heroNavigationAnimationType = .none
        self.fetchPortfolios()
        
    }
    override func viewDidAppear(_ animated: Bool) {
        
        if isFirstLoad {
//            self.animateTransitionToPortfolio()
            self.isFirstLoad = false
        }
    }
//    @IBOutlet weak var navBarView: UIView!
//    @IBOutlet weak var searchBar: UISearchBar!
    
    // MARK: Do something
    
    @IBOutlet weak var portfolioTableView: UITableView!
    
    func setupNavTitleView() {
//        self.navBarView.snp.makeConstraints { (make) in
//            make.width.equalTo(self.view.frame.width - 110)
//            make.height.equalTo(56)
//
//        }
        //        self.navBarView.heroModifiers = [.size(CGSize(width: 300, height: 56))]
//        self.searchBar.snp.makeConstraints { (make) in
//            make.leading.equalTo(self.navBarView)
//            make.trailing.equalTo(self.navBarView)
//        }
        let tap = UITapGestureRecognizer(target: self, action: #selector(switchToSearch(sender:)))
//        self.navBarView.addGestureRecognizer(tap)
//        self.searchBar.isUserInteractionEnabled = false
        self.navigationController?.navigationBar.layoutIfNeeded()
    }
    func setupTableView() {
        self.portfolioTableView.register(UINib(nibName: "PortfolioTableViewCell", bundle: nil), forCellReuseIdentifier: "PortfolioCell")
        self.portfolioTableView.rowHeight = UITableViewAutomaticDimension
        self.portfolioTableView.estimatedRowHeight = 120
    }
    
    func handlePan(gestureRecognizer:UIPanGestureRecognizer) {
        let translation = panGR.translation(in: nil)
        var progress = translation.x / view.bounds.width / 2
//        print(progress)
        switch panGR.state {
        case .began:
            // begin the transition as normal
            
            if progress < 0 {
                self.tabBarController?.heroTabBarAnimationType = .slide(direction: .left)
                self.tabBarController?.selectedIndex = 1
            } else {
                self.tabBarController?.heroTabBarAnimationType = .slide(direction: .right)
                self.tabBarController?.selectedIndex = 2
            }
        case .changed:
            // calculate the progress based on how far the user moved
            if progress < 0 {
                progress *= -1
            }
//            let translation = panGR.translation(in: nil)
//            let progress = translation.x / 2 / view.bounds.width
            
            Hero.shared.update(progress + 0.1)
            Hero.shared.apply(modifiers: [.translate(x: translation.x, y: 0, z: 0)], to: self.view)
//            Hero.shared.apply(modifiers: [.position(translation)], to: self.view)
//            Hero.shared.update(Double(progress))
        default:
            
            // end or cancel the transition based on the progress and user's touch velocity
            if progress + self.panGR.velocity(in: nil).x / self.view.bounds.width > 0.4 {
                DispatchQueue.main.asyncAfter(deadline: .now(), execute: {
                    Hero.shared.finish()
                })
                
            } else if progress + self.panGR.velocity(in: nil).x / self.view.bounds.width < -0.4 {
                DispatchQueue.main.asyncAfter(deadline: .now(), execute: {
                    Hero.shared.finish()
                })
            } else {
                DispatchQueue.main.asyncAfter(deadline: .now(), execute: {
                    Hero.shared.cancel()
                })
            }
        }
    }
    
    func displayPortfolios(viewModel: ListPortfolios.FetchPortfolios.ViewModel) {
        self.portfolios = viewModel.portfolios
        self.portfolioTableView.reloadData()
    }
    
    func fetchPortfolios() {
        self.interactor?.fetchPortfolios()
    }
    @IBAction func switchToPortfolio(sender: Any?) {
        self.tabBarController?.heroTabBarAnimationType = .slide(direction: .right)
        self.tabBarController?.selectedIndex = 2
//        UIView.transition(from: view1!, to: view2!, duration: 1.0, options: .curveLinear, completion: { (b) in
//
//        })
        
    }
    @IBAction func switchToSearch(sender: Any?) {
        self.tabBarController?.heroTabBarAnimationType = .slide(direction: .left)
        self.tabBarController?.selectedIndex = 1
    }
    
    
    
}
extension ListPortfoliosViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return portfolios.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "PortfolioCell") as! PortfolioTableViewCell
        let dataSource = AssetCollectionDataSource()
        dataSource.assetNames = self.portfolios[indexPath.row].assetNames
    
        cell.pieChart.heroID = "pieChart\(indexPath.row)"
        cell.setCell(portfolio: self.portfolios[indexPath.row], source: dataSource)
        return cell
    }
}

extension ListPortfoliosViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.navigationController?.heroNavigationAnimationType = .none
        var cell = tableView.dequeueReusableCell(withIdentifier: "PortfolioCell", for: indexPath) as! PortfolioTableViewCell
        let rows = tableView.indexPathsForVisibleRows
//        zip(rows!,tableView.visibleCells).map { (tempPath, c) -> Void in
//            if tempPath.row == indexPath.row {
//                let ce = c as! PortfolioTableViewCell
//                c.heroModifiers = [.fade]
//                ce.pieChart.heroID = "pieChart"
//            } else {
//                let ce = c as! PortfolioTableViewCell
//                c.heroModifiers = [.fade]
//                ce.pieChart.heroID = ""
//            }
//
//
//        }
//        cell.pieChart.heroID = "pieChart"
        
        
        
        
//        let vc = self.storyboard?.instantiateViewController(withIdentifier: "LoadingVC")
//        self.navigationController?.pushViewController(vc!, animated: true)
        
        self.performSegue(withIdentifier: "ShowPortfolio", sender: self)
//        tableView.deselectRow(at: indexPath, animated: true)
//        cell.pieChart.heroID = ""
    }
    func animateTransitionToPortfolio() {
        DispatchQueue.main.async {
            let indexPath = IndexPath(row: 0, section: 0)
            self.navigationController?.heroNavigationAnimationType = .none
            var cell = self.portfolioTableView.dequeueReusableCell(withIdentifier: "PortfolioCell", for: indexPath) as! PortfolioTableViewCell
            self.portfolioTableView.visibleCells.map { (c) -> Void in
                c.heroModifiers = [.fade]
                
            }
            self.view.heroModifiers = [.fade]
            
            
            
            
            //        let vc = self.storyboard?.instantiateViewController(withIdentifier: "LoadingVC")
            //        self.navigationController?.pushViewController(vc!, animated: true)
            self.performSegue(withIdentifier: "ShowPortfolio", sender: self)
        }
        
        
    }
}

