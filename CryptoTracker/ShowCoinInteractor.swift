//
//  ShowCoinInteractor.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/25/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowCoinBusinessLogic
{
//    func doSomething(request: ShowCoin.Something.Request)
    func fetchCoin(request: ShowCoin.ShowCoin.Request)
    func fetchExchangesAndPair(request: ShowCoin.FetchExchangesAndPair.Request, completion: @escaping ()-> Void)
    
}

protocol ShowCoinDataStore
{
    //var name: String { get set }
    var coin: Coin? { get set }
    
    var exchange: Exchange? { get set }
    
    var pair: Pair? { get set }
}

class ShowCoinInteractor: ShowCoinBusinessLogic, ShowCoinDataStore
{

    var presenter: ShowCoinPresentationLogic?
//    var worker: PortfolioWorker = PortfolioWorker.sharedInstance
    var coinWorker: CoinWorker = CoinWorker()
    var coin: Coin?
    var exchange: Exchange?
    var pair: Pair?
    
    // MARK: Do something
    
    func fetchCoin(request: ShowCoin.ShowCoin.Request) {
        
        
        if request.exchange != nil && coin?.exchanges[request.exchange!] != nil {
            
            let exchange = coin!.exchanges[request.exchange!]!
            self.exchange = exchange
            for pair in exchange.pairs {
                if pair.quote == request.quote! {
                    self.pair = pair
                    coinWorker.fetchPair(pair: pair, exchange: exchange, completion: { (newPair) in
                        let resp = ShowCoin.ShowCoin.Response(price: newPair.price!, percent: newPair.percentChange24, volume: newPair.volume24, name: self.coin!.name, symbol: self.coin!.symbol, quote: request.quote!)
                        self.presenter?.presentCoin(response: resp)

                    })
                    return
                }
            }
            coinWorker.fetchPair(pair: exchange.pairs.first!, exchange: exchange, completion: { (newPair) in
                let resp = ShowCoin.ShowCoin.Response(price: newPair.price!, percent: newPair.percentChange24, volume: newPair.volume24, name: self.coin!.name, symbol: self.coin!.symbol, quote: exchange.pairs.first!.quote)
                self.presenter?.presentCoin(response: resp)
                
            })
            
            
        } else {
            let response = ShowCoin.ShowCoin.Response(price: self.coin!.exchanges["CoinMarketCap"]?.pairs.first?.price, percent: self.coin!.exchanges["CoinMarketCap"]?.pairs.first?.percentChange24!, volume: self.coin!.exchanges["CoinMarketCap"]?.pairs.first?.volume24, name: self.coin!.name, symbol: self.coin!.symbol,quote: "usd")
            self.presenter?.presentCoin(response: response)
        }
        
        
        
    }
    func fetchExchangesAndPair(request: ShowCoin.FetchExchangesAndPair.Request, completion: @escaping  () -> Void) {
        coinWorker.fetchExchanges(coin: self.coin!, completion: { (newCoin) in
            self.coin = newCoin
            MarketWorker.sharedInstance.coinCollection[self.coin!.name] = newCoin
            var exchange = self.coin!.exchanges.first!.value
            //            for (key, exchange) in self.coin!.exchanges {
            //                for (n, pair) in exchange.pairs.enumerated() {
            //                    self.coin!.exchanges[key]!.pairs[n].price = self.coin?.overallInfo?.price!
            //                }
            //            }
            
            let quote = exchange.pairs.first!.quote
            let resp = ShowCoin.FetchExchangesAndPair.Response(exchangeName: exchange.name, quote: quote)
            self.presenter?.presentExchangesAndPair(response: resp)
//            let response = ShowCoin.ShowCoin.Response(price: self.coin!.overallInfo?.price, percent: self.coin!.overallInfo?.percentChange24!, volume: self.coin!.overallInfo?.volume24, name: self.coin!.name, symbol: self.coin!.symbol, exchangeName: self.coin!.exchanges.first!.value.name, quote: quote)
//            self.presenter?.presentCoin(response: response)
            completion()
        },error: {
            if let coin = MarketWorker.sharedInstance.coinCollection[self.coin!.name] {
                self.coin = coin
                var exchange = self.coin!.exchanges.first!.value
                let quote = exchange.pairs.first!.quote
                let resp = ShowCoin.FetchExchangesAndPair.Response(exchangeName: exchange.name, quote: quote)
                self.presenter?.presentExchangesAndPair(response: resp)
            } else {
                let resp = ShowCoin.FetchExchangesAndPair.Response(exchangeName: "", quote: "usd")
                self.presenter?.presentExchangesAndPair(response: resp)
            }
//            var exchange = self.coin!.exchanges.first!.value
//            let quote = exchange.pairs.first!.quote
//            let resp = ShowCoin.FetchExchangesAndPair.Response(exchangeName: exchange.name, quote: quote)
//            self.presenter?.presentExchangesAndPair(response: resp)

            completion()
        })
    }
    
    
    
}
