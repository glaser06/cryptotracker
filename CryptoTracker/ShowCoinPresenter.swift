//
//  ShowCoinPresenter.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/25/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowCoinPresentationLogic
{
    func presentCoin(response: ShowCoin.ShowCoin.Response)
//    func presentExchangesAndPair(response: ShowCoin.FetchExchangesAndPair.Response)
    func presentHoldings(response: ShowCoin.FetchHoldings.Response)
    
    func presentCharts(response: ShowCoin.FetchChart.Response)
    func finishAddToWatchlist()
    func finishRemoveFromWatchlist()
}

class ShowCoinPresenter: ShowCoinPresentationLogic
{
    weak var viewController: ShowCoinDisplayLogic?
    
    // MARK: Do something
    
    func finishAddToWatchlist() {
        viewController?.displayAddToWatchlist()
    }
    func finishRemoveFromWatchlist() {
        viewController?.displayRemoveFromWatchlist()
    }
    
    func presentCoin(response: ShowCoin.ShowCoin.Response) {
        
        var cap = String(describing: Int(response.volume ?? 0.0))
        
        let length = cap.characters.count
        if length <= 3 {
            cap = "\(String(format: "%.2f",response.volume ?? 0.0))"
        
        } else {
            var index = cap.index(cap.startIndex, offsetBy: 3)
            cap = cap.substring(to: index)
            if length > 9 {
                let decimalPlace = length - 9
                if decimalPlace < 3 {
                    index = cap.index(cap.startIndex, offsetBy: decimalPlace)
                    cap.insert(".", at: index)
                }
                
                cap = "\(cap)B"
            } else if length > 6 {
                let decimalPlace = length - 6
                if decimalPlace < 3 {
                    index = cap.index(cap.startIndex, offsetBy: decimalPlace)
                    cap.insert(".", at: index)
                }
                
                cap = "\(cap)M"
            } else if length > 3 {
                let decimalPlace = length - 3
                if decimalPlace < 3 {
                    index = cap.index(cap.startIndex, offsetBy: decimalPlace)
                    cap.insert(".", at: index)
                }
                cap = "\(cap)K"
                
            } else {
                cap = "\(String(format: "%.2f",response.volume!))"
            }
        }
        var changeValue: Double
        if let c = response.valueChanged {
            changeValue = c
        } else {
            changeValue = response.price! * ((response.percent ?? 0.0)/100)
        }
//        let changeValue = response.valueChanged!
        let formattedChange = String(format: "%.2f", changeValue)
        let formattedPercent = String(format: "%.2f", response.percent ?? 0.0)
        let didIncrease = (response.percent ?? 0.0 >= 0)
        let formattedPrice: String
        if response.quote == "usd" {
            formattedPrice = "\(response.price!)"
        } else {
            formattedPrice = "\(response.price!)"
        }
        
        let highFormatted = String(format: "%.2f", response.high24 ?? 0.0)
        let lowFormatted = String(format: "%.2f", response.low24 ?? 0.0)
        
        let open: Double = response.open!
        let openFormatted = String(format: "%.2f", open)
        
        let data = ShowCoin.ShowCoin.ViewModel.Data(open: open, high: response.high24 ?? 0.0, low: response.low24 ?? 0.0, close: response.price!)
        
        var date: String = ""
        if response.prevDate == nil {
            date = "Loading..."
        } else {
            date = "\(response.date.offset(from: response.prevDate!))"
        }
        
        let vm = ShowCoin.ShowCoin.ViewModel(price: formattedPrice, open: openFormatted, percent: "\(formattedChange) (\(formattedPercent)%)", volume: "\(cap)",high24: highFormatted, low24: lowFormatted, name: response.name, symbol: response.symbol, didIncrease: didIncrease, quote: response.quote.uppercased(), exchange: response.exchange, quotes: response.quotes, exchanges: response.exchanges, cap: response.cap, url: response.url, details: response.details, date: date, data: data)
        viewController?.displayCoin(viewModel: vm)
    }
    
    func presentCharts(response: ShowCoin.FetchChart.Response) {
        let vm = ShowCoin.FetchChart.ViewModel(chartData: response.chartData)
        self.viewController?.displayCharts(viewModel: vm)
    }
    
//    func presentExchangesAndPair(response: ShowCoin.FetchExchangesAndPair.Response) {
//        let vm = ShowCoin.FetchExchangesAndPair.ViewModel(exchangeName: response.exchangeName.capitalized, quote: response.quote.uppercased(), quotes: response.quotes)
//        viewController?.displayExchanges(viewModel: vm)
//    }
    func presentHoldings(response: ShowCoin.FetchHoldings.Response) {
        if !response.exists {
            let vm = ShowCoin.FetchHoldings.ViewModel(marketValue: "", initialValue: "", amount: "", totalGain: "", percentHoldings: 0.0, exists: false, watchlist: response.watchlist)
            self.viewController?.displayHoldings(viewModel: vm)
            return
        }
        let marketValue = String(format: "%.2f", response.marketValue)
        let initValue = String(format: "%.2f", response.initialValue)
        let percentHolding = response.marketValue / response.totalPortfolioValue
        let amount = "\(response.amount)"
        let gain = String(format: "$%.2f", response.totalGain)
        let percentage = String(format: "%.2f", response.totalGain/response.initialValue) + "%"
        let vm = ShowCoin.FetchHoldings.ViewModel(marketValue: marketValue, initialValue: initValue, amount: amount, totalGain: "\(gain) (\(percentage))", percentHoldings: percentHolding, exists: true, watchlist: response.watchlist)
        self.viewController?.displayHoldings(viewModel: vm)
    }
}










