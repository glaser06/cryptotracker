//
//  AddTransactionViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/25/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol AddTransactionDisplayLogic: class
{
    func dismissCompletedTransaction(viewModel: AddTransaction.SaveTransaction.ViewModel)
    func displayTransactionError()
    func displayTransaction(viewModel: AddTransaction.LoadTransaction.ViewModel)
}

class AddTransactionViewController: UIViewController, AddTransactionDisplayLogic
{
    var interactor: AddTransactionBusinessLogic?
    var router: (NSObjectProtocol & AddTransactionRoutingLogic & AddTransactionDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AddTransactionInteractor()
        let presenter = AddTransactionPresenter()
        let router = AddTransactionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.setupDismissTap()
        self.amountField.adjustsFontSizeToFitWidth = true
        self.amountField.minimumFontSize = 10.0
        self.totalAmountField.adjustsFontSizeToFitWidth = true
        self.totalAmountField.minimumFontSize = 10.0
        
        self.loadTransaction()
//        self.amountField.becomeFirstResponder()
    }
    func setupDismissTap() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(forceEndEditing))
        self.view.addGestureRecognizer(tap)
    }
    func forceEndEditing() {
        self.view.endEditing(true)
    }
    
    
    var isBuying: Transaction.OrderType = .Buy
    
    var exchangeNames: [String] = []
    
    var baseNames: [String] = []
    
    var quoteNames: [String] = []
    
    // MARK: Do something
    
    @IBOutlet weak var scrollView: UIScrollView!
    
    @IBOutlet weak var exchangeSelectionField: UITextField!
    @IBOutlet weak var pairNameLabel: UILabel!
//    @IBOutlet weak var baseCurrencySelection: UITextField!
//    @IBOutlet weak var quoteCurrencySelection: UITextField!
    
    @IBOutlet weak var totalAmountField: UITextField!
//    @IBOutlet weak var currentPriceLabel: UILabel!
//    @IBOutlet weak var totalPriceLabel: UILabel!
    @IBOutlet weak var amountField: UITextField!
    @IBOutlet weak var priceField: UITextField!
    @IBOutlet var baseCurrencyLabels: [UILabel]!
    @IBOutlet weak var quoteCurrencyLabel: UILabel!
    
    @IBOutlet weak var buyButton: UIButton!
    @IBOutlet weak var sellButton: UIButton!
    @IBOutlet weak var buySellContainer: UIView!
    @IBOutlet var transactionDirectionArrows: [UIImageView]!
    
//    @IBOutlet weak var buySellIndicator: NSLayoutConstraint!
    
    
    @IBAction func back() {
//        self.navigationController?.dismiss(animated: true, completion: nil)
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func selectBuy() {
        UIView.animate(withDuration: 0.1, animations: {
            self.buyButton.backgroundColor = UIColor.clear
            self.sellButton.backgroundColor = UIColor.clear
            self.buyButton.setTitleColor(UIColor.white, for: .normal)
            self.sellButton.setTitleColor(UIColor.white, for: .normal)
            self.buySellContainer.backgroundColor = UIView.theGreen
            self.transactionDirectionArrows.map({ (img) -> Void in
                img.image = #imageLiteral(resourceName: "double_up-white")
            })
            self.buyButton.borderWidth = 1.0
            self.sellButton.borderWidth = 0.0
        }, completion: { (finished) in
            self.isBuying = .Buy
        })
    }
    @IBAction func selectSell() {
        UIView.animate(withDuration: 0.1, animations: {
            self.buyButton.backgroundColor = UIColor.clear
            self.sellButton.backgroundColor = UIColor.clear
            self.buyButton.setTitleColor(UIColor.white, for: .normal)
            self.sellButton.setTitleColor(UIColor.white, for: .normal)
            self.buySellContainer.backgroundColor = UIView.theRed
            self.transactionDirectionArrows.map({ (img) -> Void in
                img.image = #imageLiteral(resourceName: "double_down-white")
            })
            self.buyButton.borderWidth = 0.0
            self.sellButton.borderWidth = 1.0
            
        }, completion: { (finished) in
            self.isBuying = .Sell
        })
    }
    
    @IBAction func confirm() {
        let isBuy: Bool = self.isBuying == .Buy
        let priceText: String = (priceField.text == nil || priceField.text! == "") ? priceField.placeholder! : self.priceField.text!
        let amountText = self.amountField.text == "" ? "0.0" : self.amountField.text!
        let totalText = (totalAmountField.text == nil || totalAmountField.text! == "") ? totalAmountField.placeholder! : self.totalAmountField.text!
        let req = AddTransaction.SaveTransaction.Request(isBuying: isBuy, amount: Double(amountText)!, price: Double(priceText) ?? 0.0, totalCost: Double(totalText)!, notes: nil)
        interactor?.saveTransaction(request: req)
    }
    @IBAction func updatePrice(sender: UITextField?) {
        let amountText = self.amountField.text == "" ? "0.0" : self.amountField.text!
        var priceText: String
        if totalAmountField.text == "" {
            priceText = (priceField.text == nil || priceField.text! == "") ? priceField.placeholder! : self.priceField.text!
            let amount: Double = Double(amountText) ?? 0.0
            let price: Double = Double(priceText) ?? 0.0
            
            let total = amount * price
            self.totalAmountField.placeholder = "\(total)"
            
        } else {
            let amount: Double = Double(amountText) ?? 0.0
            let total: Double = Double(self.totalAmountField.text!) ?? 0.0
            self.priceField.text = ""
            if amount != 0 {
                let price = total / amount
                
                self.priceField.placeholder = "\(price)"
            }
            
        }
        
//        let priceText = self.priceField.text == "" ? self.priceField.placeholder! : self.priceField.text!
        
        
        self.amountField.resizeText()
        self.totalAmountField.resizeText()
        
    }
    func loadTransaction() {
        let req = AddTransaction.LoadTransaction.Request(exchangeName: nil, quoteName: nil, initialLoad: true)
        interactor?.loadTransaction(request: req)
    }
    func displayTransactionError() {
        let alert = UIAlertController(title: "Network Error", message: "Cannot determine fiat price", preferredStyle: .alert)
        let dismiss = UIAlertAction(title: "Dismiss", style: .default, handler: nil)
        alert.addAction(dismiss)
        self.present(alert, animated: true, completion: nil)
    }
    func dismissCompletedTransaction(viewModel: AddTransaction.SaveTransaction.ViewModel) {
        
        var vc: UIViewController = self.presentingViewController!
        self.dismiss(animated: true, completion: nil)
//        while((vc.presentingViewController) != nil && !(vc.presentingViewController! is ShowCoinViewController)) {
//            vc = vc.presentingViewController!
////            if vc.presentingViewController! is ShowPortfolioViewController {
////                break
////            } else {
////
////            }
//            
//        }
//        vc.dismiss(animated: true, completion: nil)
        
//        self.navigationController?.dismiss(animated: true, completion: nil)
    }
    func displayTransaction(viewModel: AddTransaction.LoadTransaction.ViewModel) {
        self.exchangeNames = viewModel.exchangeNames
        self.quoteNames = viewModel.quoteNames
        
        self.pairNameLabel.text = viewModel.coinName.uppercased() + " / " + viewModel.quoteName.uppercased()
        self.exchangeSelectionField.text = viewModel.exchangeName
        self.baseCurrencyLabels.map { (l) -> Void in
            l.text = viewModel.coinName.uppercased()
        }
//        self.quoteCurrencySelection.text = viewModel.quoteName.uppercased()
        self.quoteCurrencyLabel.text = viewModel.quoteName.uppercased()
        
        self.priceField.placeholder = viewModel.currentPrice
//        self.currentPriceLabel.text = viewModel.currentPrice
        
        if viewModel.isBuy {
            self.selectBuy()
        } else {
            self.selectSell()
        }
        
        self.updatePrice(sender: nil)
        
        let exchangePicker = UIPickerView()
        exchangePicker.tag = 1
        exchangePicker.delegate = self
        exchangePicker.dataSource = self
        self.exchangeSelectionField.inputView = exchangePicker
        
        let basePicker = UIPickerView()
        basePicker.tag = 2
        basePicker.delegate = self
        basePicker.dataSource = self
//        self.baseCurrencySelection.inputView = basePicker
        
        let quotePicker = UIPickerView()
        quotePicker.tag = 2
        quotePicker.delegate = self
        quotePicker.dataSource = self
//        self.quoteCurrencySelection.inputView = quotePicker
        
        
        
//        self.totalPriceLabel.text =
        
    }
    
    
    func loadnewExchange() {
        let req = AddTransaction.LoadTransaction.Request(exchangeName: self.exchangeSelectionField.text, quoteName: self.quoteCurrencyLabel.text!.lowercased(), initialLoad: false)
        self.interactor?.loadTransaction(request: req)
    }
    func loadNewPair() {
        let req = AddTransaction.LoadTransaction.Request(exchangeName: self.exchangeSelectionField.text, quoteName: self.quoteCurrencyLabel.text!.lowercased(), initialLoad: false)
        self.interactor?.loadTransaction(request: req)
    }
    
    
    
    
}
extension AddTransactionViewController: UIPickerViewDataSource, UIPickerViewDelegate {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        switch pickerView.tag {
        case 1:
            return exchangeNames.count
        case 2:
            return quoteNames.count
        case 3:
            return quoteNames.count
        default:
            return 0
        }
        
        
    }
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        switch pickerView.tag {
        case 1:
            return exchangeNames[row]
        case 2:
            return quoteNames[row].uppercased()
        case 3:
            return quoteNames[row].uppercased()
        default:
            return ""
        }
    }
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        
        switch pickerView.tag {
        case 1:
            if exchangeNames.count == 0 {
                return
            }
            self.exchangeSelectionField.text = exchangeNames[row]
            self.loadnewExchange()
        case 2:
            if quoteNames.count == 0 {
                return
            }
//            self.quoteCurrencySelection.text = quoteNames[row]
            self.loadNewPair()
        default:
            return
        }
//        self.view.endEditing(true)
    }
}
extension AddTransactionViewController: UITextFieldDelegate {
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        UIView.animate(withDuration: 0.2) {
            self.scrollView.contentOffset = CGPoint(x: self.scrollView.contentOffset.x, y: self.scrollView.contentOffset.y + 100)
        }
        
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
        UIView.animate(withDuration: 0.2) {
            self.scrollView.contentOffset = CGPoint(x: self.scrollView.contentOffset.x, y: self.scrollView.contentOffset.y - 100)
        }
        
    }
    
}







