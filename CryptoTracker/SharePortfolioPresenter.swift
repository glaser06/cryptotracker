//
//  SharePortfolioPresenter.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 12/27/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol SharePortfolioPresentationLogic
{
    func presentPortfolio(response: SharePortfolio.FetchPortfolio.Response)
}

class SharePortfolioPresenter: SharePortfolioPresentationLogic
{
    weak var viewController: SharePortfolioDisplayLogic?
    
    // MARK: Do something
    
    func presentPortfolio(response: SharePortfolio.FetchPortfolio.Response) {
        let price = String(format: "%.2f", response.value)
        var tempAssets: [SharePortfolio.FetchPortfolio.ViewModel.DisplayableAsset] = []
        let marketWorker = MarketWorker.sharedInstance
        let realm = try! Realm()
        for each in response.assets {
            //            print(each.coin!.name)
            if each.coin!.coinType != Coin.CoinType.Fiat.rawValue{
                
                let statsPair: Pair = each.coin!.defaultPair!
                let price1 = statsPair.price.value ?? 0.0
                let totalValue = String(format: "%.2f", each.amountHeld * (price1))
                let price = String(format: "%.2f", (price1))
                let percent = String(format: "%.2f", (statsPair.percentChange.value ?? 0.0))
                let isUp = statsPair.percentChange.value ?? 0.0 >= 0
                let volume = statsPair.toString(d: statsPair.volume.value)
                let a = SharePortfolio.FetchPortfolio.ViewModel.DisplayableAsset(coinName: each.coin!.name, symbol: each.coin!.symbol, amount: "\(each.amountHeld)", totalValue: "$\(totalValue)", price: "$\(price)", change: "\(percent)%", isUp: isUp, total: each.amountHeld * (price1), fiat: false, cap: statsPair.marketCapString, volume: volume, portfolioValue: response.value)
                tempAssets.append(a)
            } else {
                //                let statsPair: Pair = each.coin!.defaultPair!
                let totalValue = String(format: "%.2f", each.amountHeld )
                //                let price = String(format: "%.2f", (statsPair.price.value!))
                //                let percent = String(format: "%.2f", (statsPair.percentChange.value!))
                //                let isUp = statsPair.percentChange.value! >= 0
                let a = SharePortfolio.FetchPortfolio.ViewModel.DisplayableAsset(coinName: each.coin!.name, symbol: each.coin!.symbol, amount: "\(each.amountHeld)", totalValue: "$\(totalValue)", price: "$\(0.0)", change: "\(0.0)%", isUp: true, total: each.amountHeld , fiat: true, cap: "$0.0", volume: "", portfolioValue: response.value)
                tempAssets.append(a)
            }
            
        }
        let gainsValue = response.value - response.initialValue
        var gainsPercent = response.value/response.initialValue * 100 - 100
        if response.initialValue == 0.0 {
            gainsPercent = 0.0
        }
        
        //        do watchlist stuff
//        var tempList: [SharePortfolio.FetchPortfolio.ViewModel.DisplayableCoin] = []
//        let displayDouble: (Double?) -> String = { (d) in
//            return String(format: "%.2f", d ?? 0.0)
//        }
        //        let watchlist = response.watchlist.map({ (c) -> Pair in
        //            c.defaultPair!
        //        })
//        let watchlist = response.watchlist.sorted { (c1, c2) -> Bool in
//            let mcap1: Double = c1.marketCap.value ?? 0.0
//            let mcap2: Double = c2.marketCap.value ?? 0.0
//
//            return mcap1 > mcap2
//        }
//        for each in watchlist {
//            let pair: Pair? = each
//
//            let isUp = pair?.percentChange.value ?? 0.0 >= 0.0
//            let percent = displayDouble(pair?.percentChange.value)
//            let price = "\(displayDouble(pair?.price.value))"
//            let high = "$\(displayDouble(pair?.high.value))"
//            let open = "$\(displayDouble(pair?.open.value))"
//            let low = "$\(displayDouble(pair?.low.value))"
//            let volume = displayDouble(pair?.volume.value)
//
//
//        }
        let dayChange = String(format: "%.2f", response.change24H)
        let percent = String(format: "%.2f", response.change24H/response.value * 100)
        let vm = SharePortfolio.FetchPortfolio.ViewModel(name: response.name, totalString: "$\(price)", overallGainValue: String(format: "$%.2f", gainsValue), overallGainPercent: String(format: "%.2f%", gainsPercent), initialCost: String(format: "$%.2f", response.initialValue), change24H: "\(percent)%", assets: tempAssets)
        DispatchQueue.main.async {
            self.viewController?.displayPortfolio(vm: vm)
        }
    }
}
