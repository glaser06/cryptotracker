//
//  AddPortfolioViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 11/3/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddPortfolioDisplayLogic: class
{
    func dismiss()
}

class AddPortfolioViewController: UIViewController, AddPortfolioDisplayLogic
{
    var interactor: AddPortfolioBusinessLogic?
    var router: (NSObjectProtocol & AddPortfolioRoutingLogic & AddPortfolioDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AddPortfolioInteractor()
        let presenter = AddPortfolioPresenter()
        let router = AddPortfolioRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.endEditing))
        self.view.addGestureRecognizer(tap)
        
    }
    func endEditing() {
        self.view.endEditing(true)
    }
    @IBAction func add() {
        if nameField.text == "" {
            return
        }
        self.interactor?.addPortfolio(request: AddPortfolio.AddPortfolio.Request(name: nameField.text!, pairs: []))
    }
    @IBAction func close() {
        self.dismiss()
    }
    
    // MARK: Do something
    
    @IBOutlet weak var nameField: UITextField!
    
    func dismiss() {
        self.dismiss(animated: true, completion: nil)
    }
   
}

