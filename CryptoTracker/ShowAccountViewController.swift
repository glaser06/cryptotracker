//
//  ShowAccountViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 9/4/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowAccountDisplayLogic: class
{
  func displaySomething(viewModel: ShowAccount.Something.ViewModel)
}

class ShowAccountViewController: UIViewController, ShowAccountDisplayLogic
{
  var interactor: ShowAccountBusinessLogic?
  var router: (NSObjectProtocol & ShowAccountRoutingLogic & ShowAccountDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ShowAccountInteractor()
    let presenter = ShowAccountPresenter()
    let router = ShowAccountRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
  }
  
  // MARK: Do something
  
    @IBOutlet weak var menuView: UIView!
  
    @IBAction func back() {
        self.tabBarController?.selectedIndex = 0
    }
    @IBAction func clearPortfolio() {
        PortfolioWorker.sharedInstance.portfolio = Portfolio()
        do {
            try PortfolioWorker.sharedInstance.savePortfolio()
        } catch {
            
        }
        
    }
    
    @IBAction func menu() {
        
        
        //        self.tabBarController?.selectedIndex = 1
        if self.navigationController?.navigationBar.layer.zPosition == -1 {
            self.menuView.isHidden = true
            self.navigationController?.navigationBar.layer.zPosition = 0
            
            
        } else {
            
            self.menuView.isHidden = false
            self.navigationController?.navigationBar.layer.zPosition = -1
            let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.closeMenu(_:)))
            self.view.addGestureRecognizer(tapGesture)
        }
        
        
        
    }
    func closeMenu(_ sender: UITapGestureRecognizer) {
        self.view.removeGestureRecognizer(sender)
        if self.navigationController?.navigationBar.layer.zPosition == -1 {
            self.menu()
        }
    }
    @IBAction func switchToView(sender: UIButton) {
        self.tabBarController?.selectedIndex = sender.tag - 1
        self.menu()
    }
    
  func doSomething()
  {
    let request = ShowAccount.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ShowAccount.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}
