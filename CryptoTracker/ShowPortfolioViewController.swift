//
//  ShowPortfolioViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/25/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowPortfolioDisplayLogic: class
{
    func displayPortfolio(viewModel: ShowPortfolio.FetchPortfolio.ViewModel)
}

class ShowPortfolioViewController: UIViewController, ShowPortfolioDisplayLogic
{
    var interactor: ShowPortfolioBusinessLogic?
    var router: (NSObjectProtocol & ShowPortfolioRoutingLogic & ShowPortfolioDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowPortfolioInteractor()
        let presenter = ShowPortfolioPresenter()
        let router = ShowPortfolioRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    var assets: [ShowPortfolio.FetchPortfolio.ViewModel.DisplayableAsset] = []
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
        navigationController?.navigationBar.shadowImage = UIImage()
        
        setupAssetTable()
        
        fetchPortfolio()
        
        getAllCoins()
        
        
    }
    override func viewWillAppear(_ animated: Bool) {
        fetchPortfolio()
    }
    
    func getAllCoins() {
        interactor?.fetchAllCoins()
    }
    
    func setupAssetTable() {
        assetTableView.tableFooterView = UIView()
        assetTableView.register(UINib(nibName: "AssetTableViewCell", bundle: nil), forCellReuseIdentifier: "AssetCell")
        
        assetTableView.rowHeight = UITableViewAutomaticDimension
        assetTableView.estimatedRowHeight = 81
    }
    
    // MARK: Do something
    
    @IBOutlet weak var assetTableView: UITableView!
    
    @IBOutlet weak var totalValueLabel: UILabel!
    
    @IBOutlet weak var tableHeight: NSLayoutConstraint!
    
    @IBOutlet weak var totalGainsLabel: UILabel!
    
    @IBAction func reload() {
        fetchPortfolio()
    }
    
    func fetchPortfolio() {
        interactor?.fetchPortfolio(request: ShowPortfolio.FetchPortfolio.Request())
    }
    
    func displayPortfolio(viewModel: ShowPortfolio.FetchPortfolio.ViewModel) {
        self.assets = viewModel.assets
        let price = viewModel.totalValue
        self.totalValueLabel.text = price
        
        self.totalGainsLabel.text = "\(viewModel.overallGainValue)(\(viewModel.overallGainPercent))"
        
        self.assetTableView.reloadData()
        
        self.tableHeight.constant = assetTableView.contentSize.height
        self.view.setNeedsLayout()
        self.view.layoutIfNeeded()
        
    }
    
    
    
}

extension ShowPortfolioViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.assets.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "AssetCell") as! AssetTableViewCell
//        cell.setCell(data: self.coinsOnDisplay[indexPath.row])
        cell.setCell(asset: self.assets[indexPath.row])
        
        return cell
    }
}
extension ShowPortfolioViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let row = indexPath.row
        
        print(PortfolioWorker.sharedInstance.portfolio.assets[row].coin.name)
        self.performSegue(withIdentifier: "ShowCoin", sender: tableView)
    }
}

