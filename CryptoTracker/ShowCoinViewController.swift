//
//  ShowCoinViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/25/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Charts

protocol ShowCoinDisplayLogic: class
{
    func displayCoin(viewModel: ShowCoin.ShowCoin.ViewModel)
    func displayExchanges(viewModel: ShowCoin.FetchExchangesAndPair.ViewModel)
    func displayHoldings(viewModel: ShowCoin.FetchHoldings.ViewModel)
}

class ShowCoinViewController: UIViewController, ShowCoinDisplayLogic
{
    var interactor: ShowCoinBusinessLogic?
    var router: (NSObjectProtocol & ShowCoinRoutingLogic & ShowCoinDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowCoinInteractor()
        let presenter = ShowCoinPresenter()
        let router = ShowCoinRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        transactionButtonsView.isHidden = true
        fetchHoldings()
        fetchExchanges()
        
//        fetchCoin()
        updateGraph()
        
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
        navigationController?.navigationBar.shadowImage = UIImage()
        
        setupButtons()
        setupQuoteCollection()
        
    }
    
    
    
    // MARK: Do something
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var currencyButton: UITextField!
    @IBOutlet weak var exchangeButton: UITextField!
//    @IBOutlet weak var otherExchangesButton: UIButton!
//    @IBOutlet weak var overallCoinButton: UIButton!

    
    @IBOutlet weak var priceLabel: UILabel!
    @IBOutlet weak var percentLabel: UILabel!
    @IBOutlet weak var volumeLabel: UILabel!
    
    @IBOutlet weak var holdingValueLabel: UILabel!
    @IBOutlet weak var holdingInitialLabel: UILabel!
    @IBOutlet weak var profitLossButton: UIButton!
    @IBOutlet weak var holdingChangeLabel: UILabel!
    @IBOutlet weak var holdingAmountLabel: UILabel!
    @IBOutlet weak var holdingsView: UIView!
    
    @IBOutlet weak var quotesCollectionView: UICollectionView!
    @IBOutlet weak var collectionHeight: NSLayoutConstraint!
    
    
    
    
    
    @IBOutlet weak var transactionButtonsView: UIView!
    
//    @IBOutlet weak var overallIndicatorView: UIView!
//    @IBOutlet weak var exchangeIndicatorView: UIView!
    @IBOutlet weak var lineChart: LineChartView!
    
    var displayedExchange: String = ""
    var displayedQuote: String = ""
    var transactionType: Transaction.OrderType = .Buy
    var quotes: [String] = []
    
    func setupButtons() {
//        currencyButton.transform = CGAffineTransform(scaleX: -1.0, y: 1.0)
//        currencyButton.titleLabel?.transform = CGAffineTransform(scaleX: -1.0, y: 1.0)
//        currencyButton.imageView?.transform = CGAffineTransform(scaleX: -1.0, y: 1.0)
//        
//        exchangeButton.transform = CGAffineTransform(scaleX: -1.0, y: 1.0)
//        exchangeButton.titleLabel?.transform = CGAffineTransform(scaleX: -1.0, y: 1.0)
//        exchangeButton.imageView?.transform = CGAffineTransform(scaleX: -1.0, y: 1.0)
//        currencyButton.layer.borderColor = UIColor.white.cgColor
//        currencyButton.layer.borderWidth = 1.0
//        currencyButton.layer.shadowColor = UIColor.black.cgColor
//        currencyButton.layer.shadowRadius = 3
//        currencyButton.layer.shadowOpacity = 0.7
    }
    func setupQuoteCollection() {
//        self.quotesCollectionView.register("QuoteCollectionViewCell", forCellWithReuseIdentifier: "QuoteCell")
        self.quotesCollectionView.register(UINib(nibName: "QuoteCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "QuoteCell")
    }
    
    func fetchHoldings() {
        let req = ShowCoin.FetchHoldings.Request()
        self.interactor?.fetchHoldings(request: req)
    }
    
    func updateGraph() {
        var lineChartEntries: [ChartDataEntry] = []
        
        for i in 0...24 {
            let diceRoll = Int(arc4random_uniform(20) + 1)
            let value =  ChartDataEntry(x: Double(i), y: Double(diceRoll))
            lineChartEntries.append(value)
            
        }
        
        let line1 = LineChartDataSet(values: lineChartEntries, label: nil)
        line1.colors = [ChartColorTemplates.joyful()[0]]
        line1.drawCirclesEnabled = false
        line1.drawValuesEnabled = false
        let data = LineChartData()
        data.addDataSet(line1)
        
        
        
//        self.lineChart.drawGridBackgroundEnabled = false
        self.lineChart.xAxis.drawGridLinesEnabled = false
        self.lineChart.rightAxis.drawGridLinesEnabled = false
        self.lineChart.leftAxis.drawGridLinesEnabled = false
        self.lineChart.legend.enabled = false
        self.lineChart.rightAxis.enabled = false
        self.lineChart.leftAxis.enabled = false
        self.lineChart.xAxis.enabled = false
        self.lineChart.chartDescription = nil
        self.lineChart.extraTopOffset = 30.0
        self.lineChart.data = data
        
        
    }
    
    
    func fetchCoin()
    {
        let request = ShowCoin.ShowCoin.Request()
        interactor?.fetchCoin(request: request)
    }
    func fetchExchanges() {
        let req = ShowCoin.FetchExchangesAndPair.Request()
        interactor?.fetchExchangesAndPair(request: req, completion: fetchCoin)
    }
    @IBAction func back() {
        self.navigationController?.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func doTransaction(sender: UIButton?) {
        if sender != nil && sender?.tag == 1 {
            self.transactionType = .Buy
        } else if sender != nil {
            self.transactionType = .Sell
        }
        self.performSegue(withIdentifier: "AddTransaction", sender: self)
    }
    
    @IBAction func displayQuoteSelection() {
        if self.collectionHeight.constant == 303 {
            UIView.animate(withDuration: 0.2, animations: {
                self.collectionHeight.constant = 60
                self.view.layoutIfNeeded()
            })
        } else {
            UIView.animate(withDuration: 0.2, animations: {
                self.collectionHeight.constant = 303
                self.view.layoutIfNeeded()
            })
        }
        
    }
    
    func changeQuote(quote: String) {
        
        self.currencyButton.text = quote
        self.displayQuoteSelection()
    }
    
    
    @IBAction func fetchCoinFromExchange() {
//        self.overallCoinButton.setTitleColor(.lightGray, for: .normal)
//        self.firstExchangeButton.setTitleColor(.white, for: .normal)
//        self.overallIndicatorView.isHidden = true
//        self.exchangeIndicatorView.isHidden = false
        
        let req = ShowCoin.ShowCoin.Request(exchange: self.displayedExchange, quote: self.displayedQuote)
        interactor?.fetchCoin(request: req)
    }
    @IBAction func fetchOverallInfo() {
        self.fetchCoin()
//        self.overallCoinButton.setTitleColor(.white, for: .normal)
//        self.firstExchangeButton.setTitleColor(.lightGray, for: .normal)
//        self.overallIndicatorView.isHidden = false
//        self.exchangeIndicatorView.isHidden = true
    }
    @IBAction func changeExchange() {
//        print("here")
    }
    
    func displayHoldings(viewModel: ShowCoin.FetchHoldings.ViewModel) {
        if !viewModel.exists {
            self.holdingsView.isHidden = true
            return
        }
        
        self.holdingValueLabel.text = viewModel.marketValue
        self.holdingInitialLabel.text = viewModel.initialValue
//        self.holdingChangeLabel.text = viewModel.change24H
        self.holdingAmountLabel.text = viewModel.amount
        
        self.profitLossButton.setTitle(viewModel.totalGain, for: .normal)
    }
    
    func displayCoin(viewModel: ShowCoin.ShowCoin.ViewModel)
    {
        self.nameLabel.text = "\(viewModel.name.capitalized) (\(viewModel.symbol.uppercased()))"
        self.volumeLabel.text = "24HVol: \(viewModel.volume)"
        self.priceLabel.text = viewModel.price
        self.percentLabel.text = viewModel.percent
        if !viewModel.didIncrease {
            self.percentLabel.textColor = UIColor.red
        }
//        self.currencyButton.setTitle(viewModel.quote, for: .normal)
        self.displayedQuote = viewModel.quote
        
//        print(viewModel.quotes)
        
        
        
        
    }
    func displayExchanges(viewModel: ShowCoin.FetchExchangesAndPair.ViewModel) {
        self.exchangeButton.text = viewModel.exchangeName
//        self.exchangeButton.setTitle(viewModel.exchangeName, for: .normal)
//        self.firstExchangeButton.setTitleColor(UIColor.lightGray, for: .normal)
//        self.currencyButton.setTitle(viewModel.quote, for: .normal)
        self.currencyButton.text = viewModel.quote
        self.displayedExchange = viewModel.exchangeName.lowercased()
        self.displayedQuote = viewModel.quote.lowercased()
        if viewModel.exchangeName != "" {
            transactionButtonsView.isHidden = false
        } else {
//            self.firstExchangeButton.isHidden = true
//            self.otherExchangesButton.isHidden = true
        }
        print(viewModel.quotes)
        self.quotes = viewModel.quotes
        self.quotesCollectionView.reloadData()
        
    }
}

extension ShowCoinViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.quotes.count
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "QuoteCell", for: indexPath) as! QuoteCollectionViewCell
        
        let index = indexPath.item
        cell.setCell(quote: self.quotes[index])
        return cell
    }
    
}
extension ShowCoinViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        changeQuote(quote: self.quotes[indexPath.item])
        
    }
}
