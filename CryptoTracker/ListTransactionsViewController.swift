//
//  ListTransactionsViewController.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 1/1/18.
//  Copyright (c) 2018 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListTransactionsDisplayLogic: class
{
    func displayTransactions(vm: ListTransactions.FetchAsset.ViewModel)
}

class ListTransactionsViewController: UIViewController, ListTransactionsDisplayLogic
{
    var interactor: ListTransactionsBusinessLogic?
    var router: (NSObjectProtocol & ListTransactionsRoutingLogic & ListTransactionsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListTransactionsInteractor()
        let presenter = ListTransactionsPresenter()
        let router = ListTransactionsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        transactionsTableView.register(UINib(nibName: TransactionTableCell.identifier, bundle: nil), forCellReuseIdentifier: TransactionTableCell.identifier)
        transactionsTableView.dataSource = self
        transactionsTableView.estimatedRowHeight = 200
        transactionsTableView.rowHeight = UITableViewAutomaticDimension
        
        self.interactor?.fetchAsset(request: ListTransactions.FetchAsset.Request())
        
    }
    
    func displayTransactions(vm: ListTransactions.FetchAsset.ViewModel) {
        self.transactions = vm.transactions
        self.transactionsTableView.reloadData()
    }
    
    var transactions: [ListTransactions.FetchAsset.ViewModel.DisplayableTransaction] = []
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var transactionsTableView: UITableView!
    
    
    
}

extension ListTransactionsViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return transactions.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: TransactionTableCell.identifier, for: indexPath) as! TransactionTableCell
        cell.setCell(transaction: transactions[indexPath.row])
        return cell
    }
    
}


