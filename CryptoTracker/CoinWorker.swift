//
//  CoinWorker.swift
//  CryptoTracker
//
//  Created by Zaizen Kaegyoshi on 8/25/17.
//  Copyright (c) 2017 zaizencorp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

class CoinWorker
{
    let coinService: CryptowatchAPI = CryptowatchAPI()
    
    
    
    func fetchExchanges(coin: Coin, completion: @escaping (Coin) -> Void, error: @escaping () -> Void) {
        
        coinService.fetchExchangesAndPairs(symbol: coin.symbol.lowercased(), completion: { (json) in
            
            if json["error"].string != nil {
                print(json)
                error()
                return
            }
            
            
            for each in json["result"]["markets"]["base"].array! {
                if !each["active"].bool!{
                    continue
                }
                let exchangeName = each["exchange"].string!
                
                var pairName = each["pair"].string!
                let index = pairName.index(pairName.startIndex, offsetBy: coin.symbol.characters.count)
                let quote = pairName.substring(from: index)
                let pair = Pair(base: coin, quote: quote, pair: pairName)
                if let ex = coin.exchanges[exchangeName] {
                    coin.exchanges[exchangeName]!.pairs.append(pair)
                    
                } else {
                    coin.exchanges[exchangeName] = Exchange(pairs: [], name: exchangeName)
                    coin.exchanges[exchangeName]!.pairs.append(pair)
                }
//                print(each)
            }
//            coin.exchanges = exchanges
            completion(coin)
        })
        
    }
//    func fetchAssets(coin: Coin, completion: @escaping (Coin) -> Void) {
//        
//    }
    
    func fetchPair(pair: Pair, exchange: Exchange, completion: @escaping (Pair) -> Void) {
        coinService.fetchPairSummary(pair: pair.pairName, exchange: exchange.name, completion: { (json) in
            var newPair = pair
            newPair.price = json["result"]["price"]["last"].double!
            newPair.percentChange24 = json["result"]["price"]["change"]["percentage"].double!
            newPair.valueChange24 = json["result"]["price"]["change"]["absolute"].double!
            newPair.volume24 = json["result"]["volume"].double!
            completion(newPair)
            
            
        })
    }
    
    
    
    
}

